import bpy
import mathutils
import tempfile
import os
from bpy_extras.io_utils import ExportHelper

bl_info = {
    "name": "LUT Exporter",
    "description": "Converts the adjustment layer effects into LUT .cube file which can be reused in different project or software",
    "author": "ichlubna",
    "version": (1, 0),
    "blender": (4, 2, 0),
    "location": "VSE",
    "warning": "",
    "tracker_url": "https://github.com/ichlubna/BlenderLUTExporter",
    "support": "COMMUNITY",
    "category": "Import-Export"
}

class LUT_OT_Export(bpy.types.Operator, ExportHelper):
    """ Exports the LUT """
    bl_idname = "sequencer.lut_export"
    bl_label = "Export LUT"
    
    filename_ext: bpy.props.StringProperty(name="LUT file extension", default=".cube")
    filepath: bpy.props.StringProperty()
    LUTresolution: bpy.props.IntProperty(name="LUT resolution", description="The amount of samples - dimension of the LUT cube (higher increases the quality but results in higher file size and slower export)", default=33, min=0)

    def getSamples(self, context):
        context.scene.sequence_editor.active_strip.select = True
        bpy.ops.sequencer.copy()
        originalScene = bpy.context.scene
        
        start = 0
        end = self.LUTresolution**3
        
        bpy.ops.scene.new(type='EMPTY')   
        bpy.context.scene.name = "LUTSamplingScene"  
        bpy.context.scene.frame_start = start
        bpy.context.scene.frame_end = end
        
        colorStrip = None
        adjustmentStrip = None
        for window in bpy.context.window_manager.windows:
            screen = window.screen
            for area in screen.areas:
                if area.type == 'SEQUENCE_EDITOR':
                    with bpy.context.temp_override(window=window, area=area):
                        bpy.ops.sequencer.paste()
                        adjustmentStrip = context.scene.sequence_editor.active_strip
                        bpy.ops.sequencer.effect_strip_add(type = "COLOR", frame_start = start, frame_end = end, channel=1, replace_sel = True)
                        colorStrip = context.scene.sequence_editor.active_strip
                        break
        
        adjustmentStrip.channel = 2
        adjustmentStrip.frame_final_start = start
        adjustmentStrip.frame_final_end = end        
             
        temp = tempfile.TemporaryDirectory()
        fileName = "LUTsample.tif"
        
        renderInfo = bpy.context.scene.render
        renderInfo.resolution_x = 4
        renderInfo.resolution_y = 4
        renderInfo.image_settings.file_format = "TIFF"
        renderInfo.image_settings.color_depth = "16"
        file = os.path.join(temp.name, fileName)
        renderInfo.filepath = file
        renderInfo.use_sequencer = True
        bpy.context.scene.display_settings.display_device = "sRGB"
        bpy.context.scene.view_settings.view_transform = "Standard"

        image = bpy.data.images.new(fileName, 0, 0)
        samples = []

        for frame in range(start, end):
            idR = frame % self.LUTresolution
            idG = (frame // self.LUTresolution) % self.LUTresolution
            idB = (frame // self.LUTresolution**2) % self.LUTresolution
            
            colorStrip.color = mathutils.Color((idR / (self.LUTresolution - 1), idG / (self.LUTresolution - 1), idB / (self.LUTresolution - 1)))
            # When using write_still instead of the save(), the colors are always corrected and not right
            bpy.ops.render.render(write_still=False)
            bpy.data.images["Render Result"].save_render(file)
            image.source = 'FILE'
            image.filepath = file
            image.reload()
            image.update()  
            samples.append(image.pixels[0:3])
        
        bpy.ops.scene.delete()
        bpy.context.window.scene = originalScene    
        temp.cleanup() 
        return samples   

    @classmethod
    def poll(cls, context):
        activeStrip = context.scene.sequence_editor.active_strip
        if activeStrip == None: 
            return False
        if activeStrip.type != "ADJUSTMENT":  
            poll_message_set("Adjustment layer in VSE needs to be selected.")
            return False
        return True

    def execute(self, context):    
        file = open(self.filepath, "w")
        file.write('TITLE "Generated by Blender LUT Exporter"\n')
        file.write('# https://github.com/ichlubna/BlenderLUTExporter\n')
        file.write("LUT_3D_SIZE "+str(self.LUTresolution)+"\n")
        samples = self.getSamples(context)
        for sample in samples:
            file.write(str(sample[0]) + " " + str(sample[1]) + " " + str(sample[2]) + "\n")            
        file.close()
        return {"FINISHED"}

def drawExport(self, context):
    self.layout.operator(LUT_OT_Export.bl_idname, text="Adjustment Layer as LUT (.cube)")

def register():
    if bpy.app.background:
        return 
    bpy.utils.register_class(LUT_OT_Export)
    bpy.types.TOPBAR_MT_file_export.append(drawExport)    
    
def unregister():
    bpy.types.TOPBAR_MT_file_export.remove(drawExport)
    bpy.utils.unregister_class(LUT_OT_Export)
    
    
if __name__ == "__main__" :
    register()        
