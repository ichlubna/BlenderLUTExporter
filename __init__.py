import bpy
import tempfile
import os

bl_info = {
    "name": "Blender LUT Exporter",
    "description": "Converts the adjustment layer effects into LUT .cube file which can be reused in different project or software",
    "author": "ichlubna",
    "version": (1, 1),
    "blender": (4, 2, 3),
    "location": "VSE",
    "warning": "",
    "tracker_url": "https://github.com/ichlubna/BlenderLUTExporter",
    "support": "COMMUNITY",
    "category": "Import-Export"
}

class LUT_PT_Panel(bpy.types.Panel):
    bl_space_type = "SEQUENCE_EDITOR"
    bl_region_type = "UI"
    bl_label = "LUT Export"
    bl_category = "LUT"

    def draw(self, context):
        col = self.layout.column(align=True)
        col.prop(context.scene, "LUToutputPath")
        col.prop(context.scene, "LUTresolution")
        activeStrip = context.scene.sequence_editor.active_strip
        if activeStrip != None: 
            if activeStrip.type != "ADJUSTMENT":  
                self.layout.label(text="Adjustment layer not selected")
                return
        if context.scene.LUToutputPath == "" or not str(context.scene.LUToutputPath).endswith(".cube"): 
            self.layout.label(text="Path not having .cube file")
            return
        col.operator("lutexport.export", text="Export")

class LUT_OT_Export(bpy.types.Operator):
    """ Exports the LUT
    """
    bl_idname = "lutexport.export"
    bl_label = "Export LUT"

    def getSamples(self, context):
        context.scene.sequence_editor.active_strip.select = True
        bpy.ops.sequencer.copy()
        originalScene = bpy.context.scene
        resolution = context.scene.LUTresolution
        
        start = 1
        end = resolution**3
        
        bpy.ops.scene.new(type='EMPTY')   
        bpy.context.scene.name = "LUTSamplingScene"  
        bpy.context.area.type="SEQUENCE_EDITOR"
        bpy.context.scene.frame_start = start
        bpy.context.scene.frame_end = end
        
        bpy.ops.sequencer.paste()
        adjustmentStrip = context.scene.sequence_editor.active_strip
        adjustmentStrip.channel = 2
        adjustmentStrip.frame_final_start = start
        adjustmentStrip.frame_final_end = end
        colorStrip = bpy.ops.sequencer.effect_strip_add(type = "COLOR", frame_start = start, frame_end = end, channel=1)
             
        temp = tempfile.TemporaryDirectory()
        fileName = "LUTsample.png"
        
        renderInfo = bpy.context.scene.render
        renderInfo.resolution_x = 4
        renderInfo.resolution_y = 4
        renderInfo.image_settings.file_format = "PNG"
        file = os.path.join(temp.name, fileName)
        renderInfo.filepath = file
        renderInfo.use_sequencer = True

        image = bpy.data.images.new(fileName, 0, 0)
        samples = []

        for frame in range(start, end):
            bpy.ops.render.render(write_still=True)
            image.source = 'FILE'
            image.filepath = file
            image.reload()
            image.update()  
            samples.append(image.pixels[0:3])
        
        image.user_clear()
        bpy.data.images.remove(image)
        bpy.ops.scene.delete()
        bpy.context.window.scene = originalScene    
        temp.cleanup() 
        return samples   

    def invoke(self, context, event):
        file = open(context.scene.LUToutputPath, "w")
        file.write('TITLE "Generated by Blender LUT Exporter"\n')
        file.write("LUT_3D_SIZE "+str(context.scene.LUTresolution)+"\n")
        samples = self.getSamples(context)
        for sample in samples:
            file.write(str(sample[0]) + " " + str(sample[1]) + " " + str(sample[2]) + "\n")            
        file.close()
        return {"FINISHED"}


def register():
    if bpy.app.background:
        return 
    bpy.utils.register_class(LUT_PT_Panel)
    bpy.utils.register_class(LUT_OT_Export)
    bpy.types.Scene.LUToutputPath = bpy.props.StringProperty(name="LUT output path", subtype="FILE_PATH", description="The path to the output LUT file", default="//")
    bpy.types.Scene.LUTresolution = bpy.props.IntProperty(name="LUT resolution", description="The amount of samples - dimension of the LUT cube (higher increases the quality but results in higher file size and slower export)", default=33, min=0)
    
def unregister():
    bpy.utils.unregister_class(LUT_PT_Panel)
    bpy.utils.unregister_class(LUT_OT_Export)
    
if __name__ == "__main__" :
    register()        